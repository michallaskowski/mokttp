apply plugin: 'kotlin-multiplatform'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildToolsVersion = '29.0.2'

    sourceSets {
        getByName("main") {
            manifest.srcFile("src/androidMain/AndroidManifest.xml")
            java.srcDirs("src/androidMain/kotlin")
            res.srcDirs("src/androidMain/res")
        }
    }
}

kotlin {
    targets {
        ios('ios') {
            binaries {
                framework {
                    baseName = "mokttp"
                    embedBitcode("disable")
                    linkerOpts("-F$projectDir/../Carthage/Build/iOS")
                }
                getTest("DEBUG").linkerOpts("-F../Carthage/Build/iOS", "-framework", "GCDWebServers")
//                getTest("DEBUG").linkerOpts.add("-framework GCDWebServers".toString())
//                getTest("DEBUG").linkerOpts.add("-F../Carthage/Build/iOS".toString())
//                getTest("DEBUG").freeCompilerArgs.add("-framework GCDWebServers".toString())
            }

//            [compilations.main, compilations.test].each {
//                it.cinterops {
//            }
            compilations.main.cinterops {
                gcdWebServer {
                    defFile("gcdWebServer.def")
                    includeDirs {
                        allHeaders("$projectDir/../Carthage/Build/iOS/GCDWebServers.framework/Headers")
                    }
                    compilerOpts("-F$projectDir/../Carthage/Build/iOS -framework GCDWebServers")
                }
            }
        }

        fromPreset(presets.android, 'android')
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }

        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
                implementation 'io.ktor:ktor-client-core:1.3.2'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'
            }
        }

        androidMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation 'com.squareup.okhttp3:mockwebserver:4.4.0'
                api 'com.squareup.okio:okio:2.6.0' // needed because of actual typalias Data
            }
        }

        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.7'
                implementation 'androidx.test.ext:junit:1.1.1'
            }
        }

        iosTest {
            dependencies {
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.7'
                implementation 'io.ktor:ktor-client-ios:1.3.2'
            }
        }

    }
}

def testOutputFile() {
    return kotlin.targets["iosX64"].binaries.getTest('DEBUG').outputFile
}

task copyGCDWebServers(type: Copy) {
    def testDir = testOutputFile().parentFile.absolutePath
    def path = "$testDir/Frameworks/GCDWebServers.framework"

    from "$projectDir/../Carthage/Build/iOS/GCDWebServers.framework"
    into path
}

task iosTest {
    dependsOn 'linkDebugTestIosX64'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = testOutputFile().absolutePath
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', 'booted', binary
        }
    }
}

iosTest.dependsOn copyGCDWebServers
copyGCDWebServers.mustRunAfter(linkDebugTestIosX64)